import streamlit as st
from pathlib import Path

# Define the folder path where files will be saved
save_folder = Path("files")  # Change if your folder path is different
save_folder.mkdir(exist_ok=True)  # Create the folder if it doesn't exist

# Page Navigation State
if "page" not in st.session_state:
    st.session_state["page"] = "login"  # Start with the login page

# Page 1: Login Page
if st.session_state["page"] == "login":
    st.title("Student Login")

    # Input fields for name, email, and class
    name = st.text_input("Student Name")
    email = st.text_input("Email ID")
    student_class = st.selectbox("Class", [7, 8, 9, 10, 11, 12])

    # Login button
    if st.button("Submit"):
        # Check if all fields are filled
        if name and email and student_class:
            # Store the data in session state to use across pages
            st.session_state["name"] = name
            st.session_state["email"] = email
            st.session_state["class"] = student_class
            st.session_state["page"] = "next"  # Set to "next" to show the Next Page button
            st.success(f"Login successful! Welcome, {name} from class {student_class}.")
        else:
            st.error("Please enter your name, email, and class.")

# Show the "Next Page" button after a successful login, but only if page is set to "next"
if st.session_state.get("page") == "next":
    if st.button("Next Page"):
        st.session_state["page"] = "main"  # Move to the main page

# Page 2: Main Page (only shown after clicking "Next Page")
if st.session_state["page"] == "main":
    st.title("Welcome to Your Test Page")

    # Button to download the question paper
    st.subheader("Download Question Paper")
    with open(save_folder / "question_paper.pdf", "rb") as file:
        question_paper = file.read()

    st.download_button(
        label="DOWNLOAD QUESTION PAPER",
        data=question_paper,
        file_name="question_paper.pdf",
        mime="application/pdf"
    )

    # Button to upload answer sheet
    st.subheader("Upload Your Answer Sheet")
    uploaded_file = st.file_uploader("Choose a PDF file to upload your answer sheet", type="pdf")

    # Check if a file has been uploaded
    if uploaded_file:
        # Generate the filename using the student name and class
        student_name = st.session_state["name"].replace(" ", "_")  # Replace spaces with underscores for filename
        student_class = st.session_state["class"]
        filename = f"{student_name}_{student_class}.pdf"
        
        # Save the file to the specified folder
        with open(save_folder / filename, "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        st.success(f"Answer sheet uploaded successfully and saved as '{filename}' in the {save_folder} folder.")

    # Button to download solutions
    st.subheader("Download Solutions")
    with open(save_folder / "solutions.pdf", "rb") as file:
        solutions = file.read()

    st.download_button(
        label="DOWNLOAD SOLUTIONS",
        data=solutions,
        file_name="solutions.pdf",
        mime="application/pdf"
    )
